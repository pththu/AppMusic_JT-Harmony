const { User, Message, Conversation, ConversationMember, sequelize } = require('../models');

/**
 * üí° Export m·ªôt h√†m nh·∫≠n instance c·ªßa Socket.IO Server (io)
 * @param {import('socket.io').Server} io - Instance c·ªßa Socket.IO Server
 */
module.exports = function(io) {
    // S·ª± ki·ªán khi m·ªôt client k·∫øt n·ªëi th√†nh c√¥ng
    io.on('connection', (socket) => {
        const userId = socket.user.id;
        console.log(`[CONNECT] User ID: ${userId} connected. Socket ID: ${socket.id}`);

        // 1. üöÄ ƒê√°nh d·∫•u ng∆∞·ªùi d√πng l√† ONLINE v√† tham gia ph√≤ng c√° nh√¢n c·ªßa h·ªç

        // T·∫°o m·ªôt "room" cho c√° nh√¢n ng∆∞·ªùi d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o/tr·∫°ng th√°i ri√™ng
        const personalRoom = `user_${userId}`;
        socket.join(personalRoom);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ONLINE (C·∫ßn m·ªôt c∆° ch·∫ø l∆∞u tr·∫°ng th√°i user)
        // Hi·ªán t·∫°i, ta ch·ªâ th√¥ng b√°o t·ªõi c√°c ng∆∞·ªùi d√πng kh√°c (v√≠ d·ª•: nh·ªØng ng∆∞·ªùi ƒëang theo d√µi)
        // io.emit('user_status', { userId, status: 'online' }); // Qu√° t·ªën k√©m
        // => T·ªët h∆°n: Ch·ªâ th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi d√πng trong c√πng m·ªôt conversation m√† h·ªç ƒëang tham gia.

        // 2. üëÇ X·ª≠ l√Ω s·ª± ki·ªán `disconnect` (Ng·∫Øt k·∫øt n·ªëi)
        socket.on('disconnect', () => {
            console.log(`[DISCONNECT] User ID: ${userId} disconnected. Socket ID: ${socket.id}`);
            // X·ª≠ l√Ω logic OFFLINE ·ªü ƒë√¢y (sau khi c√≥ c∆° ch·∫ø l∆∞u tr·ªØ tr·∫°ng th√°i)
            // io.emit('user_status', { userId, status: 'offline' }); 
        });

        // 3. üí¨ X·ª≠ l√Ω s·ª± ki·ªán `send_message` (G·ª≠i tin nh·∫Øn)
        socket.on('send_message', async(data, callback) => {
            const { conversationId, content, type = 'text', fileUrl = null } = data;

            if (!conversationId || (!content && !fileUrl)) {
                return callback({ status: 'error', message: 'D·ªØ li·ªáu tin nh·∫Øn kh√¥ng h·ª£p l·ªá.' });
            }

            try {
                // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i th√†nh vi√™n c·ªßa conversation kh√¥ng
                const member = await ConversationMember.findOne({
                    where: { conversationId, userId },
                    raw: true,
                });

                if (!member || member.status !== 'active') {
                    return callback({ status: 'error', message: 'B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa cu·ªôc tr√≤ chuy·ªán n√†y.' });
                }

                // L∆∞u tin nh·∫Øn v√†o DB
                const newMessage = await Message.create({
                    conversationId,
                    senderId: userId,
                    content,
                    type,
                    fileUrl,
                });

                // C·∫≠p nh·∫≠t LastMessage cho Conversation
                await Conversation.update({ lastMessageId: newMessage.id }, { where: { id: conversationId } });

                // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa tin nh·∫Øn v√† ng∆∞·ªùi g·ª≠i
                const messageWithSender = await Message.findByPk(newMessage.id, {
                    include: [{ model: User, as: 'Sender', attributes: ['id', 'username', 'avatarUrl', 'fullName'] }],
                    raw: false,
                    nest: true,
                });

                // G·ª≠i tin nh·∫Øn t·ªõi t·∫•t c·∫£ th√†nh vi√™n trong ph√≤ng Chat
                io.to(`conversation_${conversationId}`).emit('receive_message', messageWithSender);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i "ƒë√£ ƒë·ªçc" cho ch√≠nh ng∆∞·ªùi g·ª≠i
                await ConversationMember.update({ lastReadMessageId: newMessage.id }, { where: { conversationId, userId } });

                // G·ª≠i th√¥ng b√°o th√†nh c√¥ng cho client
                callback({ status: 'ok', message: messageWithSender });

            } catch (error) {
                console.error('[ERROR] send_message:', error);
                callback({ status: 'error', message: 'L·ªói server khi g·ª≠i tin nh·∫Øn.' });
            }
        });

        // 4. üö™ X·ª≠ l√Ω s·ª± ki·ªán `join_conversation` (Tham gia ph√≤ng chat)
        socket.on('join_conversation', (conversationId) => {
            const roomName = `conversation_${conversationId}`;
            socket.join(roomName);
            console.log(`[JOIN ROOM] User ID: ${userId} joined room: ${roomName}`);

        });

        // 5. ‚úçÔ∏è X·ª≠ l√Ω s·ª± ki·ªán `typing_start` (ƒêang g√µ)
        socket.on('typing_start', (conversationId) => {
            // Ph√°t s√≥ng t·ªõi t·∫•t c·∫£ th√†nh vi√™n trong ph√≤ng (tr·ª´ ng∆∞·ªùi g·ª≠i)
            socket.to(`conversation_${conversationId}`).emit('user_typing', {
                conversationId,
                userId,
                isTyping: true
            });
        });

        // 6. üõë X·ª≠ l√Ω s·ª± ki·ªán `typing_stop` (D·ª´ng g√µ)
        socket.on('typing_stop', (conversationId) => {
            // Ph√°t s√≥ng t·ªõi t·∫•t c·∫£ th√†nh vi√™n trong ph√≤ng (tr·ª´ ng∆∞·ªùi g·ª≠i)
            socket.to(`conversation_${conversationId}`).emit('user_typing', {
                conversationId,
                userId,
                isTyping: false
            });
        });

    });
};