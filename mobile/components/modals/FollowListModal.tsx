import React, { useState, useEffect } from 'react';
import {
    Modal,
    View,
    Text,
    TouchableOpacity,
    FlatList,
    ActivityIndicator,
    useColorScheme,
    Image,
    Alert,
} from 'react-native';
import { useNavigation } from "@react-navigation/native"; // C·∫ßn thi·∫øt cho navigation
import { useNavigate } from "@/hooks/useNavigate"; // üí° Gi·∫£ ƒë·ªãnh hook n√†y c√≥ s·∫µn trong d·ª± √°n c·ªßa b·∫°n
import Icon from 'react-native-vector-icons/Feather';
import { fetchFollowers, fetchFollowing, UserInfo, toggleFollow } from '../../services/socialApi'; //
import useAuthStore from '@/store/authStore'; //

// --- INTERFACES ƒê√É C·∫¨P NH·∫¨T ---

// // Interface cho d·ªØ li·ªáu ng∆∞·ªùi d√πng trong Modal (th√™m isFollowing)
// export interface UserDataInModal extends UserInfo {
//     isFollowing: boolean; // Tr·∫°ng th√°i n√†y l√† c·ªßa CURRENT USER ƒë·ªëi v·ªõi ng∆∞·ªùi n√†y
// }

interface FollowListModalProps {
    visible: boolean;
    onClose: () => void;
    userId: number; // ID c·ªßa ng∆∞·ªùi d√πng m√† ch√∫ng ta ƒëang xem danh s√°ch Follow
    listType: 'followers' | 'following'; // Lo·∫°i danh s√°ch c·∫ßn hi·ªÉn th·ªã
}

interface FollowItemProps { 
    user: UserInfo; 
    onCloseModal: () => void; // Prop ƒë·ªÉ ƒë√≥ng modal
    onToggleFollow: (userId: number) => Promise<boolean>; // H√†m g·ªçi API v√† c·∫≠p nh·∫≠t state cha
}

// =========================================================
// 1. COMPONENT CON: FollowItem
// =========================================================
const FollowItem: React.FC<FollowItemProps> = ({ user, onCloseModal, onToggleFollow }) => {
    const colorScheme = useColorScheme();
    const { navigate } = useNavigate(); // S·ª≠ d·ª•ng useNavigate hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
    const currentUserId = useAuthStore(state => state.user?.id); // L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i

    // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i follow c·ªßa ng∆∞·ªùi d√πng n√†y
    const [isFollowingState, setIsFollowingState] = useState(user.isFollowing === true);

    useEffect(() => {
        setIsFollowingState(user.isFollowing === true);
    }, [user.isFollowing]);

    const [loading, setLoading] = useState(false);
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng trong danh s√°ch c√≥ ph·∫£i l√† ch√≠nh m√¨nh kh√¥ng
    const isCurrentUser = currentUserId === user.id;
    

    // --- H√ÄM X·ª¨ L√ù THEO D√ïI/H·ª¶Y THEO D√ïI ---
    const handleToggleFollow = async () => {
        if (!currentUserId) {
            Alert.alert('L·ªói', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.');
            return;
        }

        // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫°m th·ªùi (Optimistic Update)
        const previousState = isFollowingState;
        setIsFollowingState(prev => !prev); 
        setLoading(true);

        try {
            // 2. G·ªçi API
            const newStatus = await onToggleFollow(user.id);

            // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ch√≠nh th·ª©c (n·∫øu API th√†nh c√¥ng)
            setIsFollowingState(newStatus);
        } catch (error) {
            console.error('L·ªói toggle follow:', error);
            // 4. Ho√†n l·∫°i tr·∫°ng th√°i n·∫øu g·ªçi API th·∫•t b·∫°i
            setIsFollowingState(previousState); 
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i theo d√µi.');
        } finally {
            setLoading(false);
        }
    };
    
    // --- H√ÄM X·ª¨ L√ù NH·∫§N V√ÄO USER HO·∫∂C AVATAR (ƒêi·ªÅu h∆∞·ªõng) ---
    const handleUserNavigate = () => {
        // 1. ƒê√≥ng Modal tr∆∞·ªõc
        onCloseModal(); 
        // 2. ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn ProfileSocialScreen
        navigate('ProfileSocialScreen', { userId: user.id }); 
    };

    const followButtonClass = isFollowingState 
        ? "bg-transparent border border-red-500"
        : "bg-green-600";                      

    const followButtonText = isFollowingState 
        ? "H·ªßy Theo d√µi" 
        : "Theo d√µi";

    return (
        <TouchableOpacity 
            className="flex-row items-center p-3 border-b border-gray-200 dark:border-gray-800"
            onPress={handleUserNavigate}
        >
            <Image 
                source={{ uri: user.avatarUrl || 'default_avatar_url' }} 
                className="w-10 h-10 rounded-full mr-3"
            />
            <View className="flex-1">
                <Text className="font-bold text-base text-black dark:text-white">{user.username}</Text>
                <Text className="text-sm text-gray-500 dark:text-gray-400">{user.fullName}</Text>
            </View>

            {/* ‚úÖ N√öT FOLLOW/UNFOLLOW - Ch·ªâ hi·ªÉn th·ªã khi kh√¥ng ph·∫£i l√† ch√≠nh m√¨nh */}
            {!isCurrentUser && (
                <TouchableOpacity
                    onPress={handleToggleFollow}
                    className={`px-3 py-1 rounded-full ${followButtonClass}`}
                    disabled={loading} // V√¥ hi·ªáu h√≥a khi ƒëang x·ª≠ l√Ω API
                >
                    {loading ? (
                        <ActivityIndicator color={isFollowingState ? "#ef4444" : "#fff"} />
                    ) : (
                        <Text className={`text-sm font-semibold ${isFollowingState ? "text-red-500" : "text-white"}`}>
                            {followButtonText}
                        </Text>
                    )}
                </TouchableOpacity>
            )}
        </TouchableOpacity>
    );
};


// =========================================================
// 2. COMPONENT CH√çNH: FollowListModal
// =========================================================

export default function FollowListModal({ visible, onClose, userId, listType }: FollowListModalProps) {
    const colorScheme = useColorScheme();
    // üí° S·ª≠a l·∫°i state type ƒë·ªÉ bao g·ªìm isFollowing
    const [data, setData] = useState<UserInfo[]>([]); 
    const [loading, setLoading] = useState(true);
    const title = listType === 'followers' ? 'Ng∆∞·ªùi Theo D√µi' : 'ƒêang Theo D√µi';
    const currentUserId = useAuthStore(state => state.user?.id); 
    
    // --- H√ÄM X·ª¨ L√ù API V√Ä C·∫¨P NH·∫¨T STATE ---
    const handleToggleFollow = async (userIdToToggle: number): Promise<boolean> => {
        try {
            // G·ªçi API toggleFollow
            const result = await toggleFollow(userIdToToggle);
            const newIsFollowingStatus = result.isFollowing;

            // C·∫≠p nh·∫≠t state data c·ªßa Modal
            setData(prevData =>
                prevData.map(user => 
                    user.id === userIdToToggle 
                        ? { ...user, isFollowing: newIsFollowingStatus } 
                        : user
                )
            );
            return newIsFollowingStatus;
        } catch (error) {
            console.error("L·ªói khi toggle follow trong Modal:", error);
            throw error;
        }
    };

    // --- H√ÄM L·∫§Y D·ªÆ LI·ªÜU ---
    const fetchData = async () => {
        setLoading(true);
        try {
            const fetcher = listType === 'followers' ? fetchFollowers : fetchFollowing; //
            const fetchedUsers: UserInfo[] = await fetcher(userId); //

            // ‚ö†Ô∏è L∆ØU √ù: V√¨ interface UserInfo kh√¥ng c√≥ isFollowing, 
            // t√¥i ph·∫£i gi·∫£ ƒë·ªãnh Backend ƒë√£ tr·∫£ v·ªÅ (ho·∫∑c b·∫°n s·∫Ω c·∫≠p nh·∫≠t Backend). 
            // N·∫øu kh√¥ng, b·∫°n c·∫ßn m·ªôt API b·ªï sung ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i follow c·ªßa t·ª´ng ng∆∞·ªùi.
            const finalData = fetchedUsers.map(user => ({
                ...user,
                // GI·∫¢ ƒê·ªäNH: isFollowing ƒë∆∞·ª£c Backend tr·∫£ v·ªÅ ho·∫∑c m·∫∑c ƒë·ªãnh l√† false n·∫øu kh√¥ng c√≥.
                isFollowing: (user as any).isFollowing === true, 
            })) as UserInfo[];

            setData(finalData);
        } catch (error) {
            console.error('L·ªói khi t·∫£i danh s√°ch follow:', error);
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng.');
        } finally {
            setLoading(false);
        }
    };

        useEffect(() => {
            if (visible && userId) {
                fetchData();
            }
        }, [visible, userId, listType]);

    return (
        <Modal
            animationType="slide"
            transparent={true}
            visible={visible}
            onRequestClose={onClose}
        >
            <View className="flex-1 justify-end bg-black/50 dark:bg-black/80">
                <View 
                    className={`h-3/4 rounded-t-3xl p-0 ${colorScheme === 'dark' ? 'bg-[#0E0C1F]' : 'bg-white'}`}
                >
                    {/* Header */}
                    <View className="flex-row justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
                        <Text className="text-xl font-bold text-black dark:text-white">{title}</Text>
                        <TouchableOpacity onPress={onClose} className="p-1">
                            <Icon name="x" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />
                        </TouchableOpacity>
                    </View>

                    {/* Content */}
                    {loading ? (
                        <View className="flex-1 justify-center items-center">
                            <ActivityIndicator size="large" color="#10B981" />
                        </View>
                    ) : (
                        <FlatList
                            data={data}
                            keyExtractor={(item) => item.id.toString()}
                            renderItem={({ item }) => (
                                <FollowItem 
                                    user={item} 
                                    onCloseModal={onClose} // ‚úÖ Truy·ªÅn h√†m ƒë√≥ng Modal
                                    onToggleFollow={handleToggleFollow} // ‚úÖ Truy·ªÅn h√†m x·ª≠ l√Ω API
                                />
                            )}
                            ListEmptyComponent={() => (
                                <View className="p-8 items-center">
                                    <Text className="text-gray-500 dark:text-gray-400">Kh√¥ng c√≥ ai trong danh s√°ch n√†y.</Text>
                                </View>
                            )}
                        />
                    )}
                </View>
            </View>
        </Modal>
    );
}