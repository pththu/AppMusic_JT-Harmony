import axios from 'axios';

const axiosClient = axios.create({
  baseURL: 'http://192.168.1.5:3000/api/v1/', // Th√™m /v1/ v√†o ƒë√¢y
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  timeout: 10000,
});

// H√†m ƒë·ªÉ l·∫•y token t·ª´ localStorage ho·∫∑c sessionStorage
const getAuthToken = () => {
  // C√≥ th·ªÉ l·∫•y t·ª´ localStorage, sessionStorage, ho·∫∑c cookie
  return localStorage.getItem('accessToken') ||
    sessionStorage.getItem('accessToken') ||
    null;
};

// H√†m ƒë·ªÉ l∆∞u token m·ªõi
const setAuthToken = (token) => {
  localStorage.setItem('accessToken', token);
};

// H√†m ƒë·ªÉ x√≥a token
const removeAuthToken = () => {
  localStorage.removeItem('accessToken');
  sessionStorage.removeItem('accessToken');
};

// B·∫°n c√≥ th·ªÉ th√™m c√°c interceptor ƒë·ªÉ x·ª≠ l√Ω request v√† response ·ªü ƒë√¢y
// V√≠ d·ª•: th√™m token v√†o header cho m·ªói request
axiosClient.interceptors.request.use(
  async (config) => {
    // Th√™m token v√†o header n·∫øu c√≥
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    // Th√™m timestamp ƒë·ªÉ tr√°nh cache
    config.headers['X-Request-Time'] = Date.now();

    // Log request trong development
    if (process.env.NODE_ENV === 'development') {
      console.log('üì§ API Request:', {
        method: config.method?.toUpperCase(),
        url: config.url,
        data: config.data,
        headers: config.headers,
      });
    }

    return config;

  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

axiosClient.interceptors.response.use(
  (response) => {
    // Log response trong development
    if (process.env.NODE_ENV === 'development') {
      console.log('üì• API Response:', {
        status: response.status,
        url: response.config.url,
        data: response.data,
      });
    }

    // Tr·∫£ v·ªÅ data thay v√¨ to√†n b·ªô response object
    if (response && response.data) {
      return response.data;
    }
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // X·ª≠ l√Ω l·ªói 401 (Unauthorized) - Token h·∫øt h·∫°n
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Th·ª≠ refresh token n·∫øu c√≥ API refresh
        const refreshToken = localStorage.getItem('refreshToken');
        if (refreshToken) {
          const response = await axios.post(
            'http://192.168.1.30:3000/api/v1/auth/refresh',
            { refreshToken }
          );

          const newToken = response.data.accessToken;
          setAuthToken(newToken);

          // Retry request g·ªëc v·ªõi token m·ªõi
          originalRequest.headers.Authorization = `Bearer ${newToken}`;
          return axiosClient(originalRequest);
        }
      } catch (refreshError) {
        console.error('Token refresh failed:', refreshError);
        // Redirect to login page
        removeAuthToken();
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }

    // X·ª≠ l√Ω c√°c l·ªói kh√°c
    let errorMessage = 'C√≥ l·ªói x·∫£y ra';
    let errorCode = 'UNKNOWN_ERROR';

    if (error.response) {
      // Server tr·∫£ v·ªÅ response v·ªõi status code l·ªói
      const { status, data } = error.response;

      switch (status) {
        case 400:
          errorMessage = data?.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá';
          errorCode = 'BAD_REQUEST';
          break;
        case 401:
          errorMessage = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p';
          errorCode = 'UNAUTHORIZED';
          removeAuthToken();
          break;
        case 403:
          errorMessage = 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y';
          errorCode = 'FORBIDDEN';
          break;
        case 404:
          errorMessage = 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n';
          errorCode = 'NOT_FOUND';
          break;
        case 422:
          errorMessage = data?.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá';
          errorCode = 'VALIDATION_ERROR';
          break;
        case 429:
          errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau';
          errorCode = 'TOO_MANY_REQUESTS';
          break;
        case 500:
          errorMessage = 'L·ªói m√°y ch·ªß n·ªôi b·ªô';
          errorCode = 'INTERNAL_SERVER_ERROR';
          break;
        case 502:
        case 503:
        case 504:
          errorMessage = 'M√°y ch·ªß ƒëang b·∫£o tr√¨, vui l√≤ng th·ª≠ l·∫°i sau';
          errorCode = 'SERVER_UNAVAILABLE';
          break;
        default:
          errorMessage = data?.message || `L·ªói ${status}`;
          errorCode = `HTTP_${status}`;
      }
    } else if (error.request) {
      // Request ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c response
      errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß';
      errorCode = 'NETWORK_ERROR';
    } else {
      // L·ªói kh√°c
      errorMessage = error.message || 'C√≥ l·ªói x·∫£y ra';
      errorCode = 'REQUEST_ERROR';
    }

    // Log error
    console.error('‚ùå API Error:', {
      code: errorCode,
      message: errorMessage,
      originalError: error,
      url: error.config?.url,
      method: error.config?.method,
    });

    // T·∫°o error object v·ªõi th√¥ng tin chi ti·∫øt
    interface CustomError extends Error {
      code?: string;
      status?: number;
      data?: any;
      originalError?: any;
    }
    const customError = new Error(errorMessage) as CustomError;
    customError.code = errorCode;
    customError.status = error.response?.status;
    customError.data = error.response?.data;
    customError.originalError = error;

    return Promise.reject(customError);
  }
);


export default axiosClient;
